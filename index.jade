html
	head
		meta(charset="utf-8")
		title Dynamic Table
		script(src="http://d3js.org/d3.v3.min.js" charset="utf-8")
		style.
			body {
				font: 24px monospace
			}
			table {
				margin: 10px;
				font-size: 24px;
			}
			td {
				padding: 5px;
				border-bottom: 1px solid black;
			}
			td.update {
				color: blue;
			}
			td.enter {
				color: green;
			}
			td.exit, tr.exit td {
				color: red;
			}
			td.row-header {
				border-right: 1px solid black;
				font-weight: bold;
			}
	body
		table
		script.
			// function that returns a key-value pair
			var make_key_value = function(k, v) {
				return {
					key: k,
					value: v
				};
			};

			// join a key array with a data array 
			// return an array of key-value objects
			var merge = function(keys, data) {
				var d = [];
				for (var i = 0; i < keys.length; i++) {
					d.push(make_key_value(keys[i], data[i].slice()));
				}
				return d;
			};

			function shuffle(array) {
				var m = array.length;
				var t;
				var i;
				while(m) {
					//shuffling random values
					i = Math.floor(Math.random() * m--); 
					t = array[m];
					array[m] = array[i];
					array[i] = t;
				}
				return array;
			};

			function get_random_int(min, max) {
				return Math.floor(Math.random() * (max - min + 1)) + min;
			};

			function update_array(a, new_size) {
				a = a || [];
				if (a.length > new_size) {
					return a.slice(0, new_size);
				}

				var delta = new_size - a.length;
				for (var i = 0; i < delta; i++) {
					a.push(get_random_int(0, 9));
				}
				return a;
			};

			//generate data
			var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
			var letter_to_data = {};
			var generate_data = function() {
				var i, j, a, l;
				var letters = shuffle(alphabet);
				var num_cols = get_random_int(3, 10);
				var num_rows = get_random_int(5, 15);

				var row_data = []; //array of arrays
				for (i = 0; i < num_rows; i++) {
					l = letters[i]; //key
					a = update_array(letter_to_data[l], num_cols);
					letter_to_data[l] = a; //value is an array
					row_data.push(a);
				}

				for (i = num_rows; i < letters.length; i++) {
					delete letter_to_data[i];
				}

				letters = letters.slice(0, num_rows);
				console.log(letter_to_data);
				return merge(letters, row_data);
			};

			//helper functions
			var get_key = function(d) {
				return d && d.key; //returns the key as long as d isn't null
			};

			var extract_row_data = function(d) {
				var values = d.value.slice();

				values.unshift(d.key);
				return values;
			};

			var ident = function(d) {
				return d;
			};

			//update table
			var table = d3.select('table');

			var update = function(new_data) {
				var rows = table.selectAll('tr').data(new_data, get_key);

				var cells = rows.selectAll('td').data(extract_row_data);
				cells.attr('class', 'update');
				cells.enter().append('td')
					.style('opacity', 0.0)
					.attr('class', 'enter')
					.transition()
					.delay(900)
					.duration(500)
					.style('opacity', 1.0);

				cells.text(ident);

				cells.exit()
					.attr('class', 'exit')
					.transition()
					.delay(200)
					.duration(500)
					.style('opacity', 0.0)
					.remove();

				var cells_in_new_rows = rows.enter().append('tr')
											.selectAll('td')
											.data(extract_row_data);
				cells_in_new_rows.enter().append('td')
					.style('opacity', 0.0)
					.attr('class', 'enter')
					.transition()
					.delay(900)
					.duration(500)
					.style('opacity', 1.0);
				cells_in_new_rows.text(ident);

				rows.exit()
					.attr('class', 'exit')
					.transition()
					.delay(200)
					.duration(500)
					.style('opacity', 0.0)
					.remove();
				table.selectAll('tr').select('td').classed('row-header', true);
			};

			update(generate_data());

			setInterval(function() {
				update(generate_data());
				}, 4000);









