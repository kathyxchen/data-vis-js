html
	head
		meta(charset="utf-8")
		title Force-Directed Graph
		script(src="node_modules/d3/d3.min.js" charset="utf-8")
		script(type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js")
		style.
			path.link {
				fill: none;
				stroke: #666;
				stroke-width: 1.5px;
			}
			circle {
				fill: #ccc;
				stroke: #fff;
				stroke-width: 1.5px;
			}
			text {
				fill: #000;
				font: 10px sans-serif;
				pointer-events: none;
			}
	body
		script.
			d3.csv("data/example.csv", function(error, links) {
				var nodes = {};
				
				// links is an array of objects
				// in rows: for each row
				links.forEach(function(link) {
					// if doesn't match any node values yet, create a new one
					link.source = nodes[link.source] || 
						(nodes[link.source] = {name: link.source});
					link.target = nodes[link.target] || 
						(nodes[link.target] = {name: link.target});
					link.value = +link.value;
				});
				
				var width = 960, 
					height = 500;

				var force = d3.layout.force() 
					.nodes(d3.values(nodes))
					.links(links)
					.size([width, height])
					.linkDistance(60)
					.charge(-300)
					.on("tick", tick)
					.start();

				var svg = d3.select("body").append("svg")
					.attr("width", width)
					.attr("height", height);

				svg.append("svg:defs").selectAll("marker")
						.data(["end"])
					.enter().append("svg:marker")
						.attr("id", String)
						.attr("viewBox", "0 -5 10 10")
						.attr("refX", 15)
						.attr("refY", -1.5)
						.attr("markerWidth", 6)
						.attr("markerHeight", 6)
						.attr("orient", "auto")
					.append("svg:path")
						.attr("d", "M0,-5L10,0L0,5");

				var path = svg.append("svg:g").selectAll("path")
						.data(force.links())
					.enter().append("svg:path")
						.attr("class", "link")
						.attr("marker-end", "url(#end)");

				var node = svg.selectAll(".node")
						.data(force.nodes())
					.enter().append("g")
						.attr("class", "node")
						.call(force.drag);

				node.append("circle")
					.attr("r", 5);

				node.append("text")
					.attr("x", 12)
					.attr("dy", ".35em")
					.text(function(d) { return d.name; });

				function tick() {
					path.attr("d", function(d) {
						var dx = d.target.x - d.source.x,
							dy = d.target.y - d.source.y,
							dr = Math.sqrt(dx * dx + dy * dy);
						return "M" + 
							d.source.x + "," + 
							d.source.y + "A" + 
							dr + "," + dr + " 0 0,1 " + 
							d.target.x + "," + 
							d.target.y;
					});
					node.attr("transform", function(d) {
						return "translate(" + d.x + "," + d.y + ")"; 
						});
				}

			});








